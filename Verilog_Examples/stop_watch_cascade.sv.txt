module stop_watch_cascade
(
    input wire clk,
    input wire go,
    input wire clr,
    output wire [3:0] d2, dl, do
);


localparam DVSR = 5000000;

reg [22:0] ms_reg;
wire [22:0] ms_next;

reg [3:0] d2_reg, dl_reg, do_reg;
wire [3:0] d2_next, dl_next, do_next;

wire dl_en, d2_en, do_en;
wire ms_tick, do_tick, dl_tick;

always @(posedge clk) begin
    if (clr) begin
        ms_reg <= 0;
        d2_reg <= 0;
        dl_reg <= 0;
        do_reg <= 0;
    end else begin
        ms_reg <= ms_next;
        d2_reg <= d2_next;
        dl_reg <= dl_next;
        do_reg <= do_next;
    end
end


assign ms_next = (clr || (ms_reg == DVSR && go)) ? 0 :
                 (go) ? ms_reg + 1 : ms_reg;

assign ms_tick = (ms_reg == DVSR) ? 1'b1 : 1'b0;

assign do_en = ms_tick;
assign do_next = (clr || (do_en && do_reg == 9)) ? 0 :
                 (do_en) ? do_reg + 1 : do_reg;

assign do_tick = (do_reg == 9) ? 1'b1 : 1'b0;

assign dl_en = ms_tick & do_tick;
assign dl_next = (clr || (dl_en && dl_reg == 9)) ? 0 :
                 (dl_en) ? dl_reg + 1 : dl_reg;

assign dl_tick = (dl_reg == 9) ? 1'b1 : 1'b0;

assign d2_en = ms_tick & do_tick & dl_tick;
assign d2_next = (clr || (d2_en && d2_reg == 9)) ? 0 :
                 (d2_en) ? d2_reg + 1 : d2_reg;

assign do = do_reg;
assign dl = dl_reg;
assign d2 = d2_reg;

endmodule